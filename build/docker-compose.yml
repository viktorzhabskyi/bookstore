version: '3.8'
services:
  # Backend Redis service
  backend_redis:
    image: еуіе_ефп
    container_name: backend-redis
    environment:
      SECRET_KEY: "SECRET_KEY"
      CORS_ALLOWED_ORIGINS: "http://localhost:8001,http://127.0.0.1:8001,http://0.0.0.0:8001,http://localhost,http://127.0.0.1,http://0.0.0.0"
      DEBUG: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - redis
    networks:
      - backend_network
    ports:
      - "8002:8000"
  backend_rds:
    image: еуіе_ефп
    container_name: backend-rds
    depends_on:
      - postgres
    environment:
      CORS_ALLOWED_ORIGINS: "http://localhost:8000,http://127.0.0.1:8000,http://0.0.0.0:8000,http://localhost,http://127.0.0.1,http://0.0.0.0"
      DB_NAME: postgres
      DB_USER: root
      DB_PASSWORD: 123
      DB_HOST: postgres
      DB_PORT: 5432
    networks:
      - backend_network
    ports:
      - "8001:8000"
  frontend:
    image: еуіе_ефп
    container_name: frontend
    environment:
      BACKEND_REDIS_URL: "http://backend-redis:8000/test_connection/"
      BACKEND_RDS_URL: "http://backend-rds:8000/test_connection/"
    networks:
      - backend_network
    ports:
      - "8000:8000"
  redis:
    image: redis:7.4.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend_network
  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
    ports:
      - "5432:5432"
    networks:
      - backend_network
  fronntend:
    image: еуіе_ефп
networks:
  backend_network:
    driver: bridge
volumes:
  redis_data:
  postgres_data:
